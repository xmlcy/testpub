"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2024 Droid Robot, Inc.  All rights reserved.

Downloading, reproducing, distributing or otherwise using the SDK Software
is subject to the terms and conditions of the Droid Robot Software
Development Kit License (20240808-DRSDK-SL).
"""

import abc
import collections.abc
import droid_msg_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ArmServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetArmConfig: grpc.UnaryUnaryMultiCallable[
        droid_msg_pb2.Empty,
        droid_msg_pb2.DroidConfigs,
    ]
    """Get robot config information"""

    GetArmState: grpc.UnaryUnaryMultiCallable[
        droid_msg_pb2.Empty,
        droid_msg_pb2.DroidArmResponse,
    ]
    """Get robot state information (such as kinematic state, power state, or faults)."""

    GetArmStateStream: grpc.UnaryStreamMultiCallable[
        droid_msg_pb2.Empty,
        droid_msg_pb2.DroidArmResponse,
    ]
    """Lightweight Streaming version of RobotState"""

    SetArmCommand: grpc.UnaryUnaryMultiCallable[
        droid_msg_pb2.DroidCommandRequest,
        droid_msg_pb2.Empty,
    ]
    """Command updates for joint control"""

    SetArmCommandStream: grpc.StreamUnaryMultiCallable[
        droid_msg_pb2.DroidCommandRequest,
        droid_msg_pb2.Empty,
    ]
    """Command updates for joint control"""

    ExchangeArmControlStream: grpc.StreamStreamMultiCallable[
        droid_msg_pb2.DroidCommandRequest,
        droid_msg_pb2.DroidArmResponse,
    ]
    """Robot State and Command updates for robot control"""

class ArmServiceAsyncStub:
    GetArmConfig: grpc.aio.UnaryUnaryMultiCallable[
        droid_msg_pb2.Empty,
        droid_msg_pb2.DroidConfigs,
    ]
    """Get robot config information"""

    GetArmState: grpc.aio.UnaryUnaryMultiCallable[
        droid_msg_pb2.Empty,
        droid_msg_pb2.DroidArmResponse,
    ]
    """Get robot state information (such as kinematic state, power state, or faults)."""

    GetArmStateStream: grpc.aio.UnaryStreamMultiCallable[
        droid_msg_pb2.Empty,
        droid_msg_pb2.DroidArmResponse,
    ]
    """Lightweight Streaming version of RobotState"""

    SetArmCommand: grpc.aio.UnaryUnaryMultiCallable[
        droid_msg_pb2.DroidCommandRequest,
        droid_msg_pb2.Empty,
    ]
    """Command updates for joint control"""

    SetArmCommandStream: grpc.aio.StreamUnaryMultiCallable[
        droid_msg_pb2.DroidCommandRequest,
        droid_msg_pb2.Empty,
    ]
    """Command updates for joint control"""

    ExchangeArmControlStream: grpc.aio.StreamStreamMultiCallable[
        droid_msg_pb2.DroidCommandRequest,
        droid_msg_pb2.DroidArmResponse,
    ]
    """Robot State and Command updates for robot control"""

class ArmServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetArmConfig(
        self,
        request: droid_msg_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[droid_msg_pb2.DroidConfigs, collections.abc.Awaitable[droid_msg_pb2.DroidConfigs]]:
        """Get robot config information"""

    @abc.abstractmethod
    def GetArmState(
        self,
        request: droid_msg_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[droid_msg_pb2.DroidArmResponse, collections.abc.Awaitable[droid_msg_pb2.DroidArmResponse]]:
        """Get robot state information (such as kinematic state, power state, or faults)."""

    @abc.abstractmethod
    def GetArmStateStream(
        self,
        request: droid_msg_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[droid_msg_pb2.DroidArmResponse], collections.abc.AsyncIterator[droid_msg_pb2.DroidArmResponse]]:
        """Lightweight Streaming version of RobotState"""

    @abc.abstractmethod
    def SetArmCommand(
        self,
        request: droid_msg_pb2.DroidCommandRequest,
        context: _ServicerContext,
    ) -> typing.Union[droid_msg_pb2.Empty, collections.abc.Awaitable[droid_msg_pb2.Empty]]:
        """Command updates for joint control"""

    @abc.abstractmethod
    def SetArmCommandStream(
        self,
        request_iterator: _MaybeAsyncIterator[droid_msg_pb2.DroidCommandRequest],
        context: _ServicerContext,
    ) -> typing.Union[droid_msg_pb2.Empty, collections.abc.Awaitable[droid_msg_pb2.Empty]]:
        """Command updates for joint control"""

    @abc.abstractmethod
    def ExchangeArmControlStream(
        self,
        request_iterator: _MaybeAsyncIterator[droid_msg_pb2.DroidCommandRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[droid_msg_pb2.DroidArmResponse], collections.abc.AsyncIterator[droid_msg_pb2.DroidArmResponse]]:
        """Robot State and Command updates for robot control"""

def add_ArmServiceServicer_to_server(servicer: ArmServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
