"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import part_pb2
import tripod_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class TripodServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetTripod: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        tripod_pb2.Tripod,
    ]
    GetState: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        tripod_pb2.TripodState,
    ]
    SendCommand: grpc.UnaryUnaryMultiCallable[
        tripod_pb2.TripodCommand,
        google.protobuf.empty_pb2.Empty,
    ]
    ResetDefaultValues: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    GetJointsLimits: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        tripod_pb2.TripodJointsLimits,
    ]

class TripodServiceAsyncStub:
    GetTripod: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        tripod_pb2.Tripod,
    ]
    GetState: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        tripod_pb2.TripodState,
    ]
    SendCommand: grpc.aio.UnaryUnaryMultiCallable[
        tripod_pb2.TripodCommand,
        google.protobuf.empty_pb2.Empty,
    ]
    ResetDefaultValues: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    GetJointsLimits: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        tripod_pb2.TripodJointsLimits,
    ]

class TripodServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetTripod(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[tripod_pb2.Tripod, collections.abc.Awaitable[tripod_pb2.Tripod]]: ...
    @abc.abstractmethod
    def GetState(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[tripod_pb2.TripodState, collections.abc.Awaitable[tripod_pb2.TripodState]]: ...
    @abc.abstractmethod
    def SendCommand(
        self,
        request: tripod_pb2.TripodCommand,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def ResetDefaultValues(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetJointsLimits(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[tripod_pb2.TripodJointsLimits, collections.abc.Awaitable[tripod_pb2.TripodJointsLimits]]: ...

def add_TripodServiceServicer_to_server(servicer: TripodServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
