"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import audio_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class AudioServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetAudioFiles: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        audio_pb2.AudioFiles,
    ]
    PlayAudioFile: grpc.UnaryUnaryMultiCallable[
        audio_pb2.AudioFile,
        google.protobuf.empty_pb2.Empty,
    ]
    StopPlaying: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        google.protobuf.empty_pb2.Empty,
    ]
    RecordAudioFile: grpc.UnaryUnaryMultiCallable[
        audio_pb2.AudioFile,
        google.protobuf.empty_pb2.Empty,
    ]
    StopRecording: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        google.protobuf.empty_pb2.Empty,
    ]
    UploadAudioFile: grpc.StreamUnaryMultiCallable[
        audio_pb2.AudioFileRequest,
        audio_pb2.AudioAck,
    ]
    DownloadAudioFile: grpc.UnaryStreamMultiCallable[
        audio_pb2.AudioFile,
        audio_pb2.AudioFileRequest,
    ]
    RemoveAudioFile: grpc.UnaryUnaryMultiCallable[
        audio_pb2.AudioFile,
        audio_pb2.AudioAck,
    ]

class AudioServiceAsyncStub:
    GetAudioFiles: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        audio_pb2.AudioFiles,
    ]
    PlayAudioFile: grpc.aio.UnaryUnaryMultiCallable[
        audio_pb2.AudioFile,
        google.protobuf.empty_pb2.Empty,
    ]
    StopPlaying: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        google.protobuf.empty_pb2.Empty,
    ]
    RecordAudioFile: grpc.aio.UnaryUnaryMultiCallable[
        audio_pb2.AudioFile,
        google.protobuf.empty_pb2.Empty,
    ]
    StopRecording: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        google.protobuf.empty_pb2.Empty,
    ]
    UploadAudioFile: grpc.aio.StreamUnaryMultiCallable[
        audio_pb2.AudioFileRequest,
        audio_pb2.AudioAck,
    ]
    DownloadAudioFile: grpc.aio.UnaryStreamMultiCallable[
        audio_pb2.AudioFile,
        audio_pb2.AudioFileRequest,
    ]
    RemoveAudioFile: grpc.aio.UnaryUnaryMultiCallable[
        audio_pb2.AudioFile,
        audio_pb2.AudioAck,
    ]

class AudioServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetAudioFiles(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[audio_pb2.AudioFiles, collections.abc.Awaitable[audio_pb2.AudioFiles]]: ...
    @abc.abstractmethod
    def PlayAudioFile(
        self,
        request: audio_pb2.AudioFile,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def StopPlaying(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def RecordAudioFile(
        self,
        request: audio_pb2.AudioFile,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def StopRecording(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def UploadAudioFile(
        self,
        request_iterator: _MaybeAsyncIterator[audio_pb2.AudioFileRequest],
        context: _ServicerContext,
    ) -> typing.Union[audio_pb2.AudioAck, collections.abc.Awaitable[audio_pb2.AudioAck]]: ...
    @abc.abstractmethod
    def DownloadAudioFile(
        self,
        request: audio_pb2.AudioFile,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[audio_pb2.AudioFileRequest], collections.abc.AsyncIterator[audio_pb2.AudioFileRequest]]: ...
    @abc.abstractmethod
    def RemoveAudioFile(
        self,
        request: audio_pb2.AudioFile,
        context: _ServicerContext,
    ) -> typing.Union[audio_pb2.AudioAck, collections.abc.Awaitable[audio_pb2.AudioAck]]: ...

def add_AudioServiceServicer_to_server(servicer: AudioServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
